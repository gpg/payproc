#+TITLE: API reference for payprocd.
#+STARTUP: showall indent

* General syntax

  TBD

* Commands

A quick way to test commands is the use of the socat(1) tool:

: socat - unix-client:/var/run/payproc/daemon


** CARDTOKEN

Request a token for a card

Example:

#+begin_example
CARDTOKEN
Number: 4242424242424242
Exp-month: 8
exp-year: 2016
Cvc: 666
Name: Juscelino Kubitschek

OK
Token: tok_103rEw23ctCHxH4kTpC9BDTm
Last4: 4242
Live: f

#+end_example

Note that a request starts off with a command (here CARDTOKEN) and is
terminated by an empty line.  The response is either the "OK" or "ERR"
optionally followed by words on the line.  The response may then
consists of header lines and is terminated by a blank line.  Lines can
be continued on the next line by prefixing a continuation line with a
space.

The use of CARDTOKEN is not suggested - better use Stripe's
checkout Javascript to avoid handling sensitive card data on your
machine.  Having access to an unused card token, it is possible to
charge the card:

** CHARGECARD

#+begin_example
CHARGECARD
Card-Token: tok_103rEw23ctCHxH4kTpC9BDTm
Currency: USD
Amount: 17.50
Desc: OpenPGP card for use with GnuPG
Stmt-Desc: Openpgp card
Meta[name]: Juscelino Kubitschek
Meta[ship-to]: Pal√°cio da Alvorada
 70000 Brasilia
 Brazil

OK
_amount: 1750
Currency: usd
Live: f
Charge-Id: ch_103rEw23ctCHxH4ktmJ5na8N
_timestamp: 20140523T202551

#+end_example

An arbitrary number of Meta header lines may be used in the request,
they will all be written to the journal as key-value pairs.  An
example for an error return is:

#+begin_example
ERR 1 (General error)
failure: incorrect_number
failure-mesg: Your card number is incorrect.
Name: Juscelino Kubitschek

#+end_example

The "failure" data line contains a short description of the error.  It
may be returned to the user.  If a "failure-mesg" line is returned,
that may be returned verbatim to the user.  There is no guarantee that
a "failure" line will be preset.  However, the number after ERR is a
gpg-error error code and may be show to the user.  The description
after the number is usually the gpg_strerror of the error code but may
also be a more specific human readable string.

** CHECKAMOUNT

To convert an requested amount to the format used by Stripe, this
command can be used:

#+begin_example
CHECKAMOUNT
Amount: 17.3
Currency: Eur

OK
_amount: 1730
Currency: Eur
Amount: 17.3
Euro: 17.30

#+end_example

The returned data set also includes a field "Euro" with the input
amount converted to an Euro value.  This conversion is done using the
reference data retrieved via cron job.  It may be different from the
conversion done by the payment service provider.

To check recurring donations two additional items are required in the
request:

#+begin_example
Recur: 12
Stmt-Desc: Foo
#+end_example

The valid values for "Recur" are 12 for per month, 4 for per quarter,
and 1 for per year.  The "Stmt-Desc" is required and will be put on
the credit card statement along with a "Monthly"/"Quarterly"/"Yearly"
prefix.  The return value as the additional let "_plan-id".


** PPCHECKOUT

PayPal Checkout.  See the source for details. FIXME.

** SEPAPREORDER

#+begin_example
SEPAPREORDER
Amount: 17.3

OK
Currency: Eur
Amount: 17.30
SEPA-Ref: GYT3L-27
#+end_example

The error return is similar to CHARGECARD.

This commands adds a preorder record for a SEPA payment into the
preorder database.  That record will be removed after 30 days if it
has not been used.  A command line tool can be used to match a
received payment with this record and create a final log record.  Note
that a Currency is not required because SEPA does only allow Euro.
The SEPA-Ref is a short random string used to index that record.  The
additional number is used to find an entry in the preorder db in case
of a typos in the first string.


** SESSION

This is a multipurpose command to help implement a state-full service.
Note that the state information is intentional not persistent and thus
won't survive a daemon restart.

The following sub-commands are available:

- Create a new session

  : create [TTL]

  A new session is created and the provided data dictionary is stored
  by payprocd for future requests.  The data dictionary is optional.
  On success the returned data has an "_SESSID" item which is to be
  used for all further requests.  If TTL has been given this is used
  instead of the defaul TTL value.

 - Destroy a session.

   : destroy SESSID

   This shall be used to free the internal storage required for the
   session and to avoid leaving sensitive information in RAM.

 - Get data from a session.

   : get SESSID

   Return the data stored in the session identified by SESSID.

 - Put data into a session.

   : put SESSID

   Store or update the given data in the session.  Deleting an item
   from the session dictionary is possible by putting an empty string
   for it.

 - Create an alias for the session.

   : alias SESSID

   On success the returned data has an "_ALIASID" item which is to be
   used for all further alias related requests.

 - Destroy an alias.

   : dealias ALIASID

   Note that this does not destroy the session.

 - Return the session id for an alias.

   : sessid ALIASID

   On success the returned data has an "_SESSID" item.


** PPIPNHD

This command is used exclusively by the =ppipnhd= CGI to have payprocd
handle PayPal IPN requests.
